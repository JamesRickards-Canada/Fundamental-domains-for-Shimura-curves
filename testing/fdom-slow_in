\r fdom;

\\For testing if two quaternion algebras were initialized in the same way (precision may differ, but must have same fields, a and b, and maximal ideal. Probably only need to test the splitting field, algb, and the basis, but will do more tests just to be sure.
equalalg(A, B)={
  my(LA, LB, KA, KB);
  if(alghassei(A)!=alghassei(B),print("oo ramification differs");return(0));\\infinite ramification
  if(algbasis(A)!=algbasis(B),print("Basis differs");return(0));\\Basis
  if(A[11]!=B[11],print("Traces of basis elements differ");return(0));\\Traces of the basis
  if(algb(A)!=algb(B),print("b differs");return(0));\\b
  LA=algsplittingfield(A);
  LB=algsplittingfield(B);
  if(LA.pol!=LB.pol,print("a differs");return(0));\\a, from L=K(x^2-a)
  if(LA.zk!=LB.zk,print("L pseudobasis differs");return(0));\\L pseudobasis
  KA=LA.nf;
  KB=LB.nf;
  if(KA.pol!=KB.pol,print("Centre pol differs");return(0));
  if(KA.zk!=KB.zk,print("Centre different Z-basis");return(0));
  print("Equal algebras");
  return(1);
}

testalgfdom(L)={
  my(errrtol, F, A, U, Aold, iseq, P, g, word, newg, geod);
  errtol=10^-19;
  for(i=1,#L,
    for(j=1,#L[i][1],
      F=nfinit(L[i][1][j]);
	  A=alginit(F, L[i][2][j]);
	  printf("%Pd\n", algnormdisc(A));
	  printf("%P.38g\n", algfdomarea(A));\\Areas to 38 sig figs, the default precision
	  U=algfdom(A);
	  if(algfdomorder(U)!=matid(4*F.r1),print("Order is wrong!"));
	  Aold=A;
	  A=algfdomalg(U);
	  iseq=equalalg(A, Aold);
	  print(algfdomsignature(U));\\Invariant.
	  P=algfdompresentation(U);
	  g=algmulvec(A, U[1], vector(5+random(15), k, (2*random(2)-1)*(random(#U[1])+1)));\\Random norm 1 element.
	  word=algfdomword(g, P, U);
	  newg=algmulvec(A, P[1], word);
	  if(newg==g || newg==-g,print("Passed word test"),print("Failed word test"));
	  if(algelttype(A, g)==1,geod=algfdomrootgeodesic(g, U));\\No error should be raised if this works.
    );
  );
}

As=vector(6);\\Various algebras
As[1]=[[y, y, y, y], [[3, 1], [11, -21], [2627, -117], [923, -4476549]]];
As[2]=[[y^2 - y - 9, y^2 - 10, y^2 - y - 17, y^2 - 23], [[-2*y - 5, -12*y - 31], [-y + 1, -8*y + 9], [-2*y + 6, 8*y - 111], [-y, -12*y + 1]]];
As[3]=[[y^3 - 3*y - 1, y^3 - 4*y - 1, y^3 - y^2 - 4*y + 1], [[3*y^2 - 5*y - 8, 84*y^2 - 140*y - 223], [5*y^2 - 11*y - 20, -38*y^2 + 124*y - 93], [16*y^2 - 48*y - 5, 264*y^2 - 880*y - 821]]];
As[4]=[[y^4 - y^3 - 5*y^2 + 2*y + 4, y^4 - 9*y^2 + 4, y^4 - 2*y^3 - 4*y^2 + 2*y + 1], [[-2*y^3 + 6*y^2 - 2*y - 24, 22*y^3 - 70*y^2 + 10*y - 91], [2*y^2 - 6*y - 28, 82*y^3 - 30*y^2 - 528*y - 500], [-3*y^3 + 10*y^2 - 3*y - 8, -8*y^3 + 32*y^2 - 60*y - 111]]];
As[5]=[[y^5 - 5*y^3 - y^2 + 3*y + 1, y^5 - 5*y^3 - y^2 + 3*y + 1], [[-y - 1, 8*y^4 - 8*y^3 - 28*y^2 + 8*y - 23], [3*y^4 - 2*y^3 - 10*y^2 - y - 8, -32*y^4 + 84*y^3 + 112*y^2 - 248*y - 347]]];
As[6]=[[y^6 - y^5 - 7*y^4 + 2*y^3 + 7*y^2 - 2*y - 1], [[2*y^5 - 16*y^3 - 7*y^2 + 11*y - 5, 124*y^5 - 40*y^4 - 860*y^3 - 452*y^2 + 584*y + 89]]];
testalgfdom(As);