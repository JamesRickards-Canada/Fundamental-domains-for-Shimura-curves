\r fdom;

\\Geometry

hdist(I, 2*I+10)
hdist(0.2+I/4, 5*I-11.2, 0)
hdist(-1, 2) \\Error

hdist(0.0123+I/2, -0.4, 1)
hdist(0.999*I, 0.999, 1)
hdist(0, 1, 1) \\Error

M1=[4, 5;I, 2];
M2=[0, 3;1, 4];
mat_eval(M1, oo)
mat_eval(M1, -oo)
mat_eval(M1, I+2)
mat_eval(M2, oo)
mat_eval(M2, -4.5)

install("mobius_gp","GGp","mobius","./libfdom.so");\\We don't install this automatically.
c1=[I, 2, 0];\\Centred at I, radius 2
c2=[1, 1, 2, 1+I, 0, Pi/2, 1, 0];\\Centred at 1, radius 1, from 0 to 1+I
c3=[0, 1, I, (1+I)/sqrt(2), Pi/2, Pi/4, -1, 0];\\Centred at 0, radius1, from (1+I)/sqrt(2) to I (the long way around).
mobius(M1, c1)
mobius(M2, c1)
mobius(M1, c2)
mobius(M1, c3)
l1=[1, I, 1];\\Line slope 1 thru I
l2=[oo, 11.5, 1];\\Vertical line thru x=11.5
mobius(M1, l1)
mobius(M2, l1)
mobius(M1, l2)
mobius(M2, l2)
mobius([2, -1;-1, 1],[7/8, 1/8, 0])	
l3=[1, I, I, 5+6*I, 0, 0, 1, 1];
l4=[1, I, I, 5+6*I, 0, 0, -1, 1];
l5=[3, 0, oo, 1+3*I, 0, 1, 0, 1];
l6=[3, 0, oo, 1+3*I, 0, -1, 0, 1];
mobius(M1, l3)
mobius(M2, l3)
mobius(M1, l4)
mobius(M2, l4)
mobius(M1, l5)
mobius(M2, l5)
mobius(M1, l6)
mobius(M2, l6)
mobius(2, [0, 1, 0]) \\Error

rdists=vector(50, i, random(15)+1);
rpoints=vector(50, i, hdiscrandom(rdists[i]));
rpointpass=1;
for(i=1, 50, if(hdist(0, rpoints[i], 1)>rdists[i],rpointpass=0));
if(rpointpass==1, print("Pass random points test"), print("Fail random points test"));

\\Quaternion algebras

\\For testing if two quaternion algebras were initialized in the same way (precision may differ, but must have same fields, a and b, and maximal ideal. Probably only need to test the splitting field, algb, and the basis, but will do more tests just to be sure.
equalalg(A, B)={
  my(LA, LB, KA, KB);
  if(alghassei(A)!=alghassei(B),print("oo ramification differs");return(0));\\infinite ramification
  if(algbasis(A)!=algbasis(B),print("Basis differs");return(0));\\Basis
  if(A[11]!=B[11],print("Traces of basis elements differ");return(0));\\Traces of the basis
  if(algb(A)!=algb(B),print("b differs");return(0));\\b
  LA=algsplittingfield(A);
  LB=algsplittingfield(B);
  if(LA.pol!=LB.pol,print("a differs");return(0));\\a, from L=K(x^2-a)
  if(LA.zk!=LB.zk,print("L pseudobasis differs");return(0));\\L pseudobasis
  KA=LA.nf;
  KB=LB.nf;
  if(KA.pol!=KB.pol,print("Centre pol differs");return(0));
  if(KA.zk!=KB.zk,print("Centre different Z-basis");return(0));
  print("Equal algebras");
  return(1);
}

\\This function tests the following methods:
\\algelttype, algfdom, algfdomalg, algfdomarea, algfdomsignature, algfdompresentation, algfdomrootgeodesic algfdomword, algmoreprec algmulvec
\\algfdomminimalcycles is implicitly checked via both algfdompresentation and algfdomsignature.
testalgfdom(L)={
  my(errrtol, F, A, U, Aold, iseq, P, g, word, newg, geod);
  errtol=10^-19;
  for(i=1,#L,
    for(j=1,#L[i][1],
      F=nfinit(L[i][1][j]);
	  A=alginit(F, L[i][2][j]);
	  printf("%Pd\n", algnormdisc(A));
	  printf("%P.38g\n", algfdomarea(A));\\Areas to 38 sig figs, the default precision
	  U=algfdom(A);
	  if(algfdomorder(U)!=matid(4*F.r1),print("Order is wrong!"));
	  Aold=A;
	  A=algfdomalg(U);
	  iseq=equalalg(A, Aold);
	  print(algfdomsignature(U));\\Invariant.
	  P=algfdompresentation(U);
	  g=algmulvec(A, U[1], vector(5+random(15), k, (2*random(2)-1)*(random(#U[1])+1)));\\Random norm 1 element.
	  word=algfdomword(g, P, U);
	  newg=algmulvec(A, P[1], word);
	  if(newg==g || newg==-g,print("Passed word test"),print("Failed word test"));
	  if(algelttype(A, g)==1,geod=algfdomrootgeodesic(g, U));\\No error should be raised if this works.
    );
  );
}

As=vector(6);\\Various algebras
As[1]=[[y, y, y, y, y, y], [[11, -21], [2627, -117], [990, -23], [923, -4476549], [7301035, -533], [553, -1]]];
As[2]=[[y^2 - y - 4, y^2 - y - 5, y^2 - y - 9, y^2 - 10, y^2 - y - 17, y^2 - 23], [[-y + 1, -3*y], [-2*y + 2, -119], [-2*y - 5, -12*y - 31], [-y + 1, -8*y + 9], [-2*y + 6, 8*y - 111], [-y, -12*y + 1]]];
As[3]=[[y^3 - 3*y - 1, y^3 - 4*y - 1, y^3 - y^2 - 4*y + 1, y^3 - y^2 - 7*y + 8, y^3 - y^2 - 6*y + 1, y^3 - y^2 - 7*y + 6], [[3*y^2 - 5*y - 8, 84*y^2 - 140*y - 223], [5*y^2 - 11*y - 20, -38*y^2 + 124*y - 93], [16*y^2 - 48*y - 5, 264*y^2 - 880*y - 821], [6*y^2 - 20*y + 3, 126*y^2 + 154*y - 1861], [y^2 - 3*y - 6, 48*y^2 - 88*y - 415], [2*y^2 - 6*y - 13, 21*y^2 + 40*y - 301]]];
As[4]=[[y^4 - y^3 - 5*y^2 + 2*y + 4, y^4 - y^3 - 5*y^2 - y + 1, y^4 - 9*y^2 + 4, y^4 - 2*y^3 - 3*y^2 + 4*y + 1, y^4 - 6*y^2 - 2*y + 5, y^4 - 2*y^3 - 4*y^2 + 2*y + 1], [[-2*y^3 + 6*y^2 - 2*y - 24, 22*y^3 - 70*y^2 + 10*y - 91], [-5*y^3 + 13*y^2 + 5*y - 10, -100*y^3 + 216*y^2 + 208*y - 99], [2*y^2 - 6*y - 28, 82*y^3 - 30*y^2 - 528*y - 500], [-8*y^3 + 29*y^2 - 18*y - 17, -128*y^3 + 378*y^2 - 206*y - 419], [-y^3 + 3*y^2 + 2*y - 11, -60*y^3 + 100*y^2 + 164*y - 279], [-3*y^3 + 10*y^2 - 3*y - 8, -8*y^3 + 32*y^2 - 60*y - 111]]];
As[5]=[[y^5 - y^4 - 4*y^3 + 3*y^2 + 3*y - 1, y^5 - y^4 - 4*y^3 + 3*y^2 + 3*y - 1, y^5 - 5*y^3 - y^2 + 3*y + 1, y^5 - 5*y^3 - y^2 + 3*y + 1, y^5 - 2*y^4 - 3*y^3 + 5*y^2 + y - 1, y^5 - 2*y^4 - 3*y^3 + 5*y^2 + y - 1], [[16*y^4 - 40*y^3 + 8*y^2 + 32*y - 61, 1584*y^4 - 2160*y^3 - 2280*y^2 + 1792*y - 1661], [8*y^4 - 16*y^3 - 8*y^2 + 8*y - 45, -1224*y^4 + 352*y^3 + 4544*y^2 - 1480*y - 5709], [-y - 1, 8*y^4 - 8*y^3 - 28*y^2 + 8*y - 23], [3*y^4 - 2*y^3 - 10*y^2 - y - 8, -32*y^4 + 84*y^3 + 112*y^2 - 248*y - 347], [-y^3 + 3*y^2 - 2*y - 7, -6*y^4 + 16*y^3 + 4*y^2 - 44*y - 26], [2*y^4 - 9*y^3 + 10*y^2 + y - 12, 68*y^4 + 92*y^3 - 464*y^2 - 152*y - 351]]];
As[6]=[[y^6 - y^5 - 7*y^4 + 2*y^3 + 7*y^2 - 2*y - 1, y^6 - 2*y^5 - 4*y^4 + 5*y^3 + 4*y^2 - 2*y - 1, y^6 - y^5 - 6*y^4 + 6*y^3 + 8*y^2 - 8*y + 1, y^6 - 3*y^5 - 2*y^4 + 9*y^3 - 5*y + 1, y^6 - y^5 - 7*y^4 + 9*y^3 + 7*y^2 - 9*y - 1, y^6 - 6*y^4 - 2*y^3 + 7*y^2 + 2*y - 1], [[2*y^5 - 16*y^3 - 7*y^2 + 11*y - 5, 124*y^5 - 40*y^4 - 860*y^3 - 452*y^2 + 584*y + 89], [-y^5 + 3*y^4 + y^3 - 5*y^2 - 6, -32*y^5 + 64*y^4 + 84*y^3 - 64*y^2 - 255], [y^5 + 2*y^4 - 9*y^3 - 3*y^2 + 14*y - 12, -52*y^5 - 76*y^4 + 300*y^3 + 164*y^2 - 340*y - 179], [-y^5 + 3*y^4 + y^3 - 6*y^2 - y - 4, 28*y^5 - 96*y^4 - 34*y^3 + 256*y^2 + 20*y - 209], [-2*y^5 + 12*y^3 - y^2 - 13*y - 8, -56*y^5 + 32*y^4 + 376*y^3 - 224*y^2 - 412*y - 55], [-y^5 + 2*y^4 + 3*y^3 - 4*y^2 - 3*y - 6, 16*y^5 - 104*y^3 - 16*y^2 + 152*y - 71]]];
testalgfdom(As);

F=nfinit(y^2-11);\\Error
A=alginit(F, [y, 3]);
algfdom(A);

\\Time for some Eichler orders, and more specific tests. To ensure that the algebras and orders remain consistent, we store algebraic representations of them all.

\\We store an order as a vector of basis elements, written in the algebraic representation. This converts it to a matrix, whose columns express each basis element in terms of the natural order of A.
algorderalgtomatrix(A, algelts)={
  my(n, M);
  n=#algelts;\\Number of elements
  M=matrix(n, n);
  for(i=1,n,M[, i]=algalgtobasis(A, algelts[i]));
  return(M);
}
/*
Code to make the algebraic reps for the bases:
algmakeorderalg(A, ord)={
  my(n=4*A[1].nf.r1);
  if(ord==0,ord=matid(n));
  return(liftall(vector(n, i, algbasistoalg(A, ord[, i]))))
}
*/

install("alg_changeorder","GG");

setrand(1);
F=nfinit(y);
setrand(1);\\Issue is the Eichler orders contained within need to correspond to the precomputed maximal order.
A=alginit(F, [2, 1]);\\Unramified
Abas=[[1, 0]~, [x, 0]~, [1/2, 1/2]~, [1/4*x, 1/4*x]~];
A=alg_changeorder(A, algorderalgtomatrix(A, Abas));
U=algfdom(A);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O1bas=[[1, 0]~, [4*x, 0]~, [1/2, 1/2]~, [1/4*x, 1/4*x]~];\\level 4
O1=algorderalgtomatrix(A, O1bas);
if(!algisorder(A, O1),print("Not an order"));
print(algorderlevel(A, O1, 0));
U=algfdom(A, O1);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O2bas=[[1, 0]~, [13*x, 0]~, [1/2, 1/2]~, [1/4*x, 1/4*x]~];\\level 13
O2=algorderalgtomatrix(A, O2bas);
if(!algisorder(A, O2), print("Not an order"));
print(algorderlevel(A, O2, 0));
U=algfdom(A, O2);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O3bas=[[1, 0]~, [80*x, 0]~, [1/2, 1/2]~, [1/4*x, 1/4*x]~];\\level 80
O3=algorderalgtomatrix(A, O3bas);
if(!algisorder(A, O3), print("Not an order"));
print(algorderlevel(A, O3, 0));
U=algfdom(A, O3);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

setrand(1);
A=alginit(F, [3, -1]);\\Ramified at 2, 3
Abas=[[1, 0]~, [x, 0]~, [0, 1]~, [1/2*x + 1/2, 1/2*x + 1/2]~];
A=alg_changeorder(A, algorderalgtomatrix(A, Abas));
U=algfdom(A, , , [I/3+5/2, 0, 0, 0, 0]);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O1bas=[[1, 0]~, [5*x, 0]~, [0, 1]~, [7/2*x + 1/2, 1/2*x + 1/2]~];\\level 5
O1=algorderalgtomatrix(A, O1bas);
if(!algisorder(A, O1),print("Not an order"));
print(algorderlevel(A, O1, 0));
U=algfdom(A, O1);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O2bas=[[1, 0]~, [7*x, 0]~, [x, 11]~, [5/2*x + 1/2, 1/2*x + 5/2]~];\\level 77
O2=algorderalgtomatrix(A, O2bas);
if(!algisorder(A, O2), print("Not an order"));
print(algorderlevel(A, O2, 0));
U=algfdom(A, O2);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

setrand(1);
A=alginit(F, [21, 715]);\\Ramified at 11, 13
Abas=[[1, 0]~, [1/2*x - 1/2, 0]~, [0, 1]~, [17/42*x + 1/2, 1/210*x + 1/10]~];
A=alg_changeorder(A, algorderalgtomatrix(A, Abas));
U=algfdom(A, , ,[3*I-1/4, 0, 0, 0, 0]);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O1bas=[[1, 0]~, [5*x - 5, 0]~, [7/2*x - 7/2, 1]~, [19/21*x, 1/210*x + 1/10]~];
O1=algorderalgtomatrix(A, O1bas);
if(!algisorder(A, O1),print("Not an order"));
print(algorderlevel(A, O1, 0));
U=algfdom(A, O1);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));


setrand(1);
F=nfinit(y^2-11);
setrand(1);
A=alginit(F, [-2*y + 4, -y - 4]);\\Ramified at one prime above 5
Abas=[[1, 0]~, [(-1/4*y - 1/4)*x - 1/2, 0]~, [-1/2*x + (-1/2*y + 1/2), 0]~, [1/2*x + (-1/2*y + 1/2), 0]~, [0, 1]~, [0, (-1/4*y - 1/4)*x - 1/2]~, [0, -1/2*x + (-1/2*y + 1/2)]~, [(-3/28*y - 13/28)*x + (-1/2*y + 1), (-3/28*y - 13/28)*x + (-1/2*y + 1)]~];
A=alg_changeorder(A, algorderalgtomatrix(A, Abas));
U=algfdom(A, , , [I/4+1/3, 0, 0, 0, 0]);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O1bas=[[1, 0]~, [(-1/4*y - 1/4)*x - 1/2, 0]~, [-5/2*x + (-5/2*y + 5/2), 0]~, [-y + 1, 0]~, [-2*x + (-2*y + 2), 1]~, [-3/2*x + (-3/2*y + 3/2), (-1/4*y - 1/4)*x - 1/2]~, [0, -1/2*x + (-1/2*y + 1/2)]~, [(-3/28*y - 27/28)*x + (-y + 3/2), (-3/28*y - 13/28)*x + (-1/2*y + 1)]~];\\Level the other prime above 5
O1=algorderalgtomatrix(A, O1bas);
if(!algisorder(A, O1),print("Not an order"));
print(algorderlevel(A, O1, 0));
U=algfdom(A, O1);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O2bas=[[1, 0]~, [(-7/2*y - 7/2)*x - 7, 0]~, [(-y - 3/2)*x + (-1/2*y - 3/2), 0]~, [(-5/2*y - 2)*x + (-1/2*y - 9/2), 0]~, [(-3/4*y - 3/4)*x - 3/2, 1]~, [(-3/4*y - 3/4)*x - 3/2, (-1/4*y - 1/4)*x - 1/2]~, [(-3*y - 3)*x - 6, -1/2*x + (-1/2*y + 1/2)]~, [(-47/14*y - 26/7)*x + (-1/2*y - 11/2), (-3/28*y - 13/28)*x + (-1/2*y + 1)]~];\\Ideal of norm 14.
O2=algorderalgtomatrix(A, O2bas);
if(!algisorder(A, O2), print("Not an order"));
print(algorderlevel(A, O2, 0));
U=algfdom(A, O2);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

setrand(1);
A=alginit(F, [-y + 1, -48*y - 111]);\\Ramified above 2
Abas=[[1, 0]~, [x, 0]~, [-y, 0]~, [(-y - 1)*x, 0]~, [1/2, 1/2]~, [1/2*x, 1/2*x]~, [-1/2*y + 1/2, -1/2*y + 1/2]~, [(-13/20*y + 7/20)*x + (-1/2*y + 1/2), (-1/28940*y + 5519/28940)*x + (-707/2894*y + 821/2894)]~];
A=alg_changeorder(A, algorderalgtomatrix(A, Abas));
U=algfdom(A, , , [I/2, 0, 0, 0, 0]);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O1bas=[[1, 0]~, [19*x, 0]~, [-y, 0]~, [(-y + 7)*x, 0]~, [x + 1/2, 1/2]~, [17/2*x, 1/2*x]~, [13*x + (-1/2*y + 1/2), -1/2*y + 1/2]~, [(-13/20*y + 107/20)*x + (-1/2*y + 1/2), (-1/28940*y + 5519/28940)*x + (-707/2894*y + 821/2894)]~];
O1=algorderalgtomatrix(A, O1bas);
if(!algisorder(A, O1),print("Not an order"));
print(algorderlevel(A, O1, 0));
U=algfdom(A, O1);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O2bas=[[1, 0]~, [10*x, 0]~, [-y, 0]~, [(-y + 1)*x, 0]~, [1/2, 1/2]~, [11/2*x, 1/2*x]~, [-1/2*y + 1/2, -1/2*y + 1/2]~, [(-13/20*y + 107/20)*x + (-1/2*y + 1/2), (-1/28940*y + 5519/28940)*x + (-707/2894*y + 821/2894)]~];
O2=algorderalgtomatrix(A, O2bas);
if(!algisorder(A, O2), print("Not an order"));
print(algorderlevel(A, O2, 0));
U=algfdom(A, O2);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));


setrand(1);
F=nfinit(y^3-5*y+1);
setrand(1);
A=alginit(F, [y-2, -1]);\\Unramified
Abas=[[1, 0]~, [x, 0]~, [(y^2 + 2*y - 1)*x, 0]~, [(y + 2)*x, 0]~, [y, 0]~, [y^2 - 3, 0]~, [(1/2*y + 1)*x + (1/2*y^2 + 1/2*y - 1), 1/2]~, [(1/2*y^2 + 3/2*y + 1)*x + (1/2*y^2 - 1), 1/2*x]~, [(1/2*y + 3/2)*x + 1/2*y, (1/2*y^2 + y - 1/2)*x]~, [(1/2*y + 3/2)*x + 1/2, (1/2*y + 3/2)*x + 1/2]~, [(1/2*y^2 + y - 1/2)*x + (1/2*y + 1/2), (1/2*y^2 + y - 1/2)*x + (1/2*y + 1/2)]~, [(1/2*y^2 + y)*x + (1/2*y^2 - 3/2), (1/2*y^2 + y)*x + (1/2*y^2 - 3/2)]~];
A=alg_changeorder(A, algorderalgtomatrix(A, Abas));
U=algfdom(A);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O1bas=[[1, 0]~, [10*x, 0]~, [(10*y^2 + 20*y - 10)*x, 0]~, [(6*y^2 + 14*y + 6)*x, 0]~, [y, 0]~, [y^2 - 3, 0]~, [(6*y^2 + 27/2*y - 1)*x + (1/2*y^2 + 1/2*y - 1), 1/2]~, [(15/2*y^2 + 33/2*y + 1)*x + (1/2*y^2 - 1), 1/2*x]~, [(6*y^2 + 27/2*y - 1/2)*x + 1/2*y, (1/2*y^2 + y - 1/2)*x]~, [(5*y^2 + 23/2*y + 9/2)*x + 1/2, (1/2*y + 3/2)*x + 1/2]~, [(7/2*y^2 + 8*y + 1/2)*x + (1/2*y + 1/2), (1/2*y^2 + y - 1/2)*x + (1/2*y + 1/2)]~, [(17/2*y^2 + 17*y - 6)*x + (1/2*y^2 - 3/2), (1/2*y^2 + y)*x + (1/2*y^2 - 3/2)]~];\\Ramified above 2 and 5
O1=algorderalgtomatrix(A, O1bas);
if(!algisorder(A, O1),print("Not an order"));
print(algorderlevel(A, O1, 1));
U=algfdom(A, O1);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O2bas=[[1, 0]~, [11*x, 0]~, [(y^2 + 2*y + 8)*x, 0]~, [(y + 3)*x, 0]~, [y, 0]~, [y^2 - 3, 0]~, [(1/2*y + 6)*x + (1/2*y^2 + 1/2*y - 1), 1/2]~, [(1/2*y^2 + 3/2*y + 5)*x + (1/2*y^2 - 1), 1/2*x]~, [(1/2*y + 23/2)*x + 1/2*y, (1/2*y^2 + y - 1/2)*x]~, [(1/2*y + 23/2)*x + 1/2, (1/2*y + 3/2)*x + 1/2]~, [(1/2*y^2 + y - 1/2)*x + (1/2*y + 1/2), (1/2*y^2 + y - 1/2)*x + (1/2*y + 1/2)]~, [(1/2*y^2 + y + 2)*x + (1/2*y^2 - 3/2), (1/2*y^2 + y)*x + (1/2*y^2 - 3/2)]~];\\Ramified above 11
O2=algorderalgtomatrix(A, O2bas);
if(!algisorder(A, O2), print("Not an order"));
print(algorderlevel(A, O2, 1));
U=algfdom(A, O2);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

setrand(1);
A=alginit(F, [52*y^2 - 316*y - 363, -y^2 + 3*y - 9]);\\Ramified at one prime above 3 and 5
Abas=[[1, 0]~, [-y, 0]~, [y^2 - 3, 0]~, [1/2*x - 1/2, 0]~, [-1/2*y*x - 1/2*y, 0]~, [(1/2*y^2 - 2)*x + (-1/2*y^2 + 2), 0]~, [0, 1]~, [0, -y]~, [0, y^2 - 3]~, [0, 1/2*x - 1/2]~, [0, -1/2*y*x - 1/2*y]~, [(14747071/29693974*y^2 - 14006203/29693974*y - 52192327/29693974)*x + (1/2*y^2 - 1/2*y - 1/2), (1/38334920434*y^2 - 900025561/38334920434*y + 3571707438/19167460217)*x + (2301/2582*y^2 - 1379/2582*y - 3329/1291)]~];
A=alg_changeorder(A, algorderalgtomatrix(A, Abas));
U=algfdom(A);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O1bas=[[1, 0]~, [-y, 0]~, [y^2 - 3, 0]~, [x - 1, 0]~, [-y*x - y, 0]~, [(y^2 - 4)*x + (-y^2 + 4), 0]~, [-1/2*y*x - 1/2*y, 1]~, [(1/2*y^2 - 2)*x + (-1/2*y^2 + 2), -y]~, [1/2*x - 1/2, y^2 - 3]~, [(1/2*y^2 - 3/2)*x + (-1/2*y^2 + 3/2), 1/2*x - 1/2]~, [(1/2*y^2 - 3/2)*x + (-1/2*y^2 + 3/2), -1/2*y*x - 1/2*y]~, [(14747071/29693974*y^2 - 14426595/14846987*y - 52192327/29693974)*x + (1/2*y^2 - y - 1/2), (1/38334920434*y^2 - 900025561/38334920434*y + 3571707438/19167460217)*x + (2301/2582*y^2 - 1379/2582*y - 3329/1291)]~];\\Ramified above 2
O1=algorderalgtomatrix(A, O1bas);
if(!algisorder(A, O1),print("Not an order"));
print(algorderlevel(A, O1, 1));
U=algfdom(A, O1);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

setrand(1);
F=nfinit(y^4 - 2*y^3 - 3*y^2 + 4*y + 1);
setrand(1);
A=alginit(F, [2*y^2 - 5*y - 3, -1]);\\Ramified above 23
Abas=[[1, 0]~, [-y + 1, 0]~, [-y^2 + y + 2, 0]~, [y^3 - 2*y^2 - 2*y + 3, 0]~, [x, 0]~, [(-y^3 + 2*y^2 + 3*y - 4)*x, 0]~, [y*x, 0]~, [(-y^2 + 2)*x, 0]~, [-1/2*y^2 + 1/2*y + 1, 1/2]~, [1/2*y^3 - y^2 - 3/2*y + 2, -1/2*y + 1/2]~, [-1/2*y^2 + 1/2*y + 3/2, -1/2*y^2 + 1/2*y + 3/2]~, [1/2*y^3 - y^2 - y + 3/2, 1/2*y^3 - y^2 - y + 3/2]~, [(-1/2*y^2 + 1/2*y + 1)*x + (1/2*y^3 - 3/2*y^2 - y + 3), 1/2*x + (-1/2*y + 1)]~, [(1/2*y + 1/2)*x + (-1/2*y^2 + 1/2*y + 1), (-1/2*y^3 + y^2 + 3/2*y - 2)*x + 1/2]~, [(-1/2*y^3 + y^2 + 2*y - 3/2)*x + (-1/2*y^2 + 1/2*y + 3/2), (-1/2*y^3 + y^2 + 2*y - 3/2)*x + (-1/2*y^2 + 1/2*y + 3/2)]~, [(-33/26*y^3 + 45/26*y^2 + 6*y - 67/26)*x + (y^3 - 7/2*y^2 - y + 7), (-11/13*y^3 + 43/26*y^2 + 3*y - 31/13)*x + (1/2*y^3 - 3/2*y^2 - y + 9/2)]~];
A=alg_changeorder(A, algorderalgtomatrix(A, Abas));
U=algfdom(A);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

O1bas=[[1, 0]~, [-y + 1, 0]~, [-y^2 + y + 2, 0]~, [y^3 - 2*y^2 - 2*y + 3, 0]~, [11*x, 0]~, [(-y^3 + 2*y^2 + 3*y + 5)*x, 0]~, [(y + 5)*x, 0]~, [(-y^2 + 3)*x, 0]~, [4*x + (-1/2*y^2 + 1/2*y + 1), 1/2]~, [2*x + (1/2*y^3 - y^2 - 3/2*y + 2), -1/2*y + 1/2]~, [2*x + (-1/2*y^2 + 1/2*y + 3/2), -1/2*y^2 + 1/2*y + 3/2]~, [x + (1/2*y^3 - y^2 - y + 3/2), 1/2*y^3 - y^2 - y + 3/2]~, [(-1/2*y^2 + 1/2*y + 6)*x + (1/2*y^3 - 3/2*y^2 - y + 3), 1/2*x + (-1/2*y + 1)]~, [(1/2*y + 19/2)*x + (-1/2*y^2 + 1/2*y + 1), (-1/2*y^3 + y^2 + 3/2*y - 2)*x + 1/2]~, [(-1/2*y^3 + y^2 + 2*y - 3/2)*x + (-1/2*y^2 + 1/2*y + 3/2), (-1/2*y^3 + y^2 + 2*y - 3/2)*x + (-1/2*y^2 + 1/2*y + 3/2)]~, [(-33/26*y^3 + 45/26*y^2 + 6*y - 41/26)*x + (y^3 - 7/2*y^2 - y + 7), (-11/13*y^3 + 43/26*y^2 + 3*y - 31/13)*x + (1/2*y^3 - 3/2*y^2 - y + 9/2)]~];\\Ramified at prime of norm 11
O1=algorderalgtomatrix(A, O1bas);
if(!algisorder(A, O1),print("Not an order"));
print(algorderlevel(A, O1, 1));
U=algfdom(A, O1);
print(algfdomsignature(U));
P=algfdompresentation(U);
print(length(P[1]));

\\Some algmoreprec testing
install("algmoreprec","GLp",,"./libfdom.so");

setrand(1);
F=nfinit(y^2-33);\\Some fractional a, some both a and b
setrand(2);
A=alginit(F, [2, [[idealprimedec(F, 5)[1]], [1]], [0, 1]]);
for(i=1,8,B=algmoreprec(A, i%4);equalalg(A, B));\\Adding 0, 1, 2, 3 precision
setrand(2);
A=alginit(F, [2, [[idealprimedec(F, 7)[1]], [1]], [0, 1]]);
for(i=1,8,B=algmoreprec(A, i%4);equalalg(A, B));\\Adding 0, 1, 2, 3 precision
setrand(4);
A=alginit(F, [2, [[idealprimedec(F, 73)[1]], [1]], [0, 1]]);
for(i=1,8,B=algmoreprec(A, i%4);equalalg(A, B));\\Adding 0, 1, 2, 3 precision
setrand(1);
A=alginit(F, [2, [[idealprimedec(F, 97)[1]], [1]], [0, 1]]);
for(i=1,8,B=algmoreprec(A, i%4);equalalg(A, B));\\Adding 0, 1, 2, 3 precision

setrand(1);
F=nfinit(y^3 - y^2 - 10*y + 8);
setrand(1);
A=alginit(F, [2, [[idealprimedec(F, 2)[1], idealprimedec(F, 13)[1]], [1, 1]], [0, 1, 1]]);\\Fractional a
for(i=1,8,B=algmoreprec(A, i%4);equalalg(A, B));\\Adding 0, 1, 2, 3 precision
setrand(1);
A=alginit(F, [2, [[idealprimedec(F, 2)[1], idealprimedec(F, 17)[1]], [1, 1]], [0, 1, 1]]);\\Fractional b
for(i=1,8,B=algmoreprec(A, i%4);equalalg(A, B));\\Adding 0, 1, 2, 3 precision

setrand(1);
F=nfinit(y^3 - y^2 - 20*y + 9);
setrand(1);
A=alginit(F, [2, [[idealprimedec(F, 2)[1], idealprimedec(F, 5)[1]], [1, 1]], [0, 1, 1]]);\\Fractional b, 3 in denominator
for(i=1,8,B=algmoreprec(A, i%4);equalalg(A, B));\\Adding 0, 1, 2, 3 precision
setrand(1);
A=alginit(F, [2, [[idealprimedec(F, 2)[1], idealprimedec(F, 7)[1]], [1, 1]], [0, 1, 1]]);
for(i=1,8,B=algmoreprec(A, i%4);equalalg(A, B));\\Adding 0, 1, 2, 3 precision

setrand(1);
F=nfinit(y^4 - 6*y^2 + 4);\\Fractional a
setrand(1);
A=alginit(F, [2, [[idealprimedec(F, 11)[1]], [1]], [1,0,1,1]]);
for(i=1,8,B=algmoreprec(A, i%4);equalalg(A, B));\\Adding 0, 1, 2, 3 precision
setrand(1);
A=alginit(F, [2, [[idealprimedec(F, 37)[1]], [1]], [1,0,1,1]]);
for(i=1,8,B=algmoreprec(A, i%4);equalalg(A, B));\\Adding 0, 1, 2, 3 precision

setrand(1);
F=nfinit(y^4 - y^3 - 5*y^2 + 2*y + 4);\\Fractional a and b
setrand(1);
A=alginit(F, [2, [[idealprimedec(F, 7)[1]], [1]], [1,0,1,1]]);
for(i=1,8,B=algmoreprec(A, i%4);equalalg(A, B));\\Adding 0, 1, 2, 3 precision
setrand(2);
A=alginit(F, [2, [[idealprimedec(F, 11)[1]], [1]], [1,0,1,1]]);
for(i=1,8,B=algmoreprec(A, i%4);equalalg(A, B));\\Adding 0, 1, 2, 3 precision
setrand(2);
A=alginit(F, [2, [[idealprimedec(F, 47)[1]], [1]], [1,0,1,1]]);\\Fractional b only
for(i=1,8,B=algmoreprec(A, i%4);equalalg(A, B));\\Adding 0, 1, 2, 3 precision
